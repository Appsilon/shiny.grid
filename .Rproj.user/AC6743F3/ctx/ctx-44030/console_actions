{
    "data" : [
        "+ ",
        "",
        "+ ",
        "        # Show a plot of the generated distribution",
        "+ ",
        "        mainPanel(",
        "+ ",
        "           plotOutput(\"distPlot\")",
        "+ ",
        "        )",
        "+ ",
        "    )",
        "+ ",
        ")",
        "Error in paste0(\"grid-template-rows:\", grid_template_rows, \";\", \"grid-template-columns:\",  : \n  argument is missing, with no default\n",
        "> ",
        "",
        "> ",
        "# Define server logic required to draw a histogram",
        "> ",
        "server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "    output$distPlot <- renderPlot({",
        "+ ",
        "        test = 'darkgray'",
        "+ ",
        "",
        "+ ",
        "        # generate bins based on input$bins from ui.R",
        "+ ",
        "        x    <- faithful[, 2]",
        "+ ",
        "        bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "",
        "+ ",
        "        # draw the histogram with the specified number of bins",
        "+ ",
        "        hist(x, breaks = bins, col = test, border = 'white')",
        "+ ",
        "    })",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:6071\n",
        "\n",
        "\n",
        "> ",
        "# Generates 500 rows of data using the input settings from config.json",
        "> ",
        "",
        "> ",
        "library(shiny)",
        "> ",
        "library(shiny.grid)",
        "> ",
        "",
        "> ",
        "# Define UI for application that draws a histogram",
        "> ",
        "ui <- gridPage(",
        "+ ",
        "    title = \"its a boy\",",
        "+ ",
        "    dependency = bootstrapLib(),",
        "+ ",
        "    # dependency = shiny.semantic:::get_dependencies(),",
        "+ ",
        "",
        "+ ",
        "    # Application title",
        "+ ",
        "    titlePanel(\"Old Faithful Geyser Data\"),",
        "+ ",
        "",
        "+ ",
        "    # Sidebar with a slider input for number of bins",
        "+ ",
        "    sidebarLayout(",
        "+ ",
        "        sidebarPanel(",
        "+ ",
        "            sliderInput(\"bins\",",
        "+ ",
        "                        \"Number of bins:\",",
        "+ ",
        "                        min = 1,",
        "+ ",
        "                        max = 50,",
        "+ ",
        "                        value = 30)",
        "+ ",
        "        ),",
        "+ ",
        "",
        "+ ",
        "        # Show a plot of the generated distribution",
        "+ ",
        "        mainPanel(",
        "+ ",
        "           plotOutput(\"distPlot\")",
        "+ ",
        "        )",
        "+ ",
        "    )",
        "+ ",
        ")",
        "Error in paste0(\"grid-template-rows:\", grid_template_rows, \";\", \"grid-template-columns:\",  : \n  argument is missing, with no default\n",
        "> ",
        "",
        "> ",
        "# Define server logic required to draw a histogram",
        "> ",
        "server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "    output$distPlot <- renderPlot({",
        "+ ",
        "        test = 'darkgray'",
        "+ ",
        "",
        "+ ",
        "        # generate bins based on input$bins from ui.R",
        "+ ",
        "        x    <- faithful[, 2]",
        "+ ",
        "        bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "",
        "+ ",
        "        # draw the histogram with the specified number of bins",
        "+ ",
        "        hist(x, breaks = bins, col = test, border = 'white')",
        "+ ",
        "    })",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:6071\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "# Generates 500 rows of data using the input settings from config.json",
        "> ",
        "",
        "> ",
        "library(shiny)",
        "> ",
        "library(shiny.grid)",
        "> ",
        "",
        "> ",
        "# Define UI for application that draws a histogram",
        "> ",
        "ui <- gridPage(",
        "+ ",
        "    title = \"its a boy\",",
        "+ ",
        "    dependency = bootstrapLib(),",
        "+ ",
        "    # dependency = shiny.semantic:::get_dependencies(),",
        "+ ",
        "",
        "+ ",
        "    # Application title",
        "+ ",
        "    titlePanel(\"Old Faithful Geyser Data\"),",
        "+ ",
        "",
        "+ ",
        "    # Sidebar with a slider input for number of bins",
        "+ ",
        "    sidebarLayout(",
        "+ ",
        "        sidebarPanel(",
        "+ ",
        "            sliderInput(\"bins\",",
        "+ ",
        "                        \"Number of bins:\",",
        "+ ",
        "                        min = 1,",
        "+ ",
        "                        max = 50,",
        "+ ",
        "                        value = 30)",
        "+ ",
        "        ),",
        "+ ",
        "",
        "+ ",
        "        # Show a plot of the generated distribution",
        "+ ",
        "        mainPanel(",
        "+ ",
        "           plotOutput(\"distPlot\")",
        "+ ",
        "        )",
        "+ ",
        "    )",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "# Define server logic required to draw a histogram",
        "> ",
        "server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "    output$distPlot <- renderPlot({",
        "+ ",
        "        test = 'darkgray'",
        "+ ",
        "",
        "+ ",
        "        # generate bins based on input$bins from ui.R",
        "+ ",
        "        x    <- faithful[, 2]",
        "+ ",
        "        bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "",
        "+ ",
        "        # draw the histogram with the specified number of bins",
        "+ ",
        "        hist(x, breaks = bins, col = test, border = 'white')",
        "+ ",
        "    })",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:6213\n",
        "\n",
        "\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "is.character()",
        "Error in is.character() : \n  0 arguments passed to 'is.character' which requires 1\n",
        "> ",
        "is.character(2)",
        "[1] FALSE\n",
        "> ",
        "is.character(\"2323\")",
        "[1] TRUE\n",
        "> ",
        "is.character(c(1,2))",
        "[1] FALSE\n",
        "> ",
        "is.character(NULL)",
        "[1] FALSE\n\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "# Generates 500 rows of data using the input settings from config.json",
        "> ",
        "",
        "> ",
        "library(shiny)",
        "> ",
        "library(shiny.grid)",
        "> ",
        "",
        "> ",
        "# Define UI for application that draws a histogram",
        "> ",
        "ui <- gridPage(",
        "+ ",
        "    title = \"its a boy\",",
        "+ ",
        "    dependency = bootstrapLib(),",
        "+ ",
        "    # dependency = shiny.semantic:::get_dependencies(),",
        "+ ",
        "",
        "+ ",
        "    # \"grid_template_areas\" = \"\"",
        "+ ",
        "    \"grid_template_rows\" = \"1fr 2fr\"",
        "+ ",
        "    \"grid_template_columns\" = \"1fr 1fr\"",
        "Error: unexpected string constant in:\n\"    \"grid_template_rows\" = \"1fr 2fr\"\n    \"grid_template_columns\"\"\n",
        "> ",
        "",
        "> ",
        "    gridPanel(",
        "+ ",
        "      titlePanel(\"Old Faithful Geyser Data\")",
        "+ ",
        "    ),",
        "Error: unexpected ',' in:\n\"      titlePanel(\"Old Faithful Geyser Data\")\n    ),\"\n",
        "> ",
        "",
        "> ",
        "    # Application title",
        "> ",
        "    titlePanel(\"Old Faithful Geyser Data\"),",
        "Error: unexpected ',' in \"    titlePanel(\"Old Faithful Geyser Data\"),\"\n",
        "> ",
        "",
        "> ",
        "    # Sidebar with a slider input for number of bins",
        "> ",
        "    sidebarLayout(",
        "+ ",
        "        sidebarPanel(",
        "+ ",
        "            sliderInput(\"bins\",",
        "+ ",
        "                        \"Number of bins:\",",
        "+ ",
        "                        min = 1,",
        "+ ",
        "                        max = 50,",
        "+ ",
        "                        value = 30)",
        "+ ",
        "        ),",
        "+ ",
        "",
        "+ ",
        "        # Show a plot of the generated distribution",
        "+ ",
        "        mainPanel(",
        "+ ",
        "           plotOutput(\"distPlot\")",
        "+ ",
        "        )",
        "+ ",
        "    )",
        "<div class=\"row\">\n  <div class=\"col-sm-4\">\n    <form class=\"well\">\n      <div class=\"form-group shiny-input-container\">\n        <label class=\"control-label\" for=\"bins\">Number of bins:</label>\n        <input class=\"js-range-slider\" id=\"bins\" data-min=\"1\" data-max=\"50\" data-from=\"30\" data-step=\"1\" data-grid=\"true\" data-grid-num=\"9.8\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-prettify-enabled=\"true\" data-keyboard=\"true\" data-data-type=\"number\"/>\n      </div>\n    </form>\n  </div>\n  <div class=\"col-sm-8\">\n    <div id=\"distPlot\" class=\"shiny-plot-output\" style=\"width: 100% ; height: 400px\"></div>\n  </div>\n</div>",
        "\n",
        "> ",
        ")",
        "Error: unexpected ')' in \")\"\n",
        "> ",
        "",
        "> ",
        "# Define server logic required to draw a histogram",
        "> ",
        "server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "    output$distPlot <- renderPlot({",
        "+ ",
        "        test = 'darkgray'",
        "+ ",
        "",
        "+ ",
        "        # generate bins based on input$bins from ui.R",
        "+ ",
        "        x    <- faithful[, 2]",
        "+ ",
        "        bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "",
        "+ ",
        "        # draw the histogram with the specified number of bins",
        "+ ",
        "        hist(x, breaks = bins, col = test, border = 'white')",
        "+ ",
        "    })",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:7400\n",
        "\n",
        "\n",
        "> ",
        "# Generates 500 rows of data using the input settings from config.json",
        "> ",
        "",
        "> ",
        "library(shiny)",
        "> ",
        "library(shiny.grid)",
        "> ",
        "",
        "> ",
        "# Define UI for application that draws a histogram",
        "> ",
        "ui <- gridPage(",
        "+ ",
        "    title = \"its a boy\",",
        "+ ",
        "    dependency = bootstrapLib(),",
        "+ ",
        "    # dependency = shiny.semantic:::get_dependencies(),",
        "+ ",
        "",
        "+ ",
        "    # \"grid_template_areas\" = \"\"",
        "+ ",
        "    \"grid_template_rows\" = \"1fr 2fr\",",
        "+ ",
        "    \"grid_template_columns\" = \"1fr 1fr\",",
        "+ ",
        "",
        "+ ",
        "    gridPanel(",
        "+ ",
        "      titlePanel(\"Old Faithful Geyser Data\")",
        "+ ",
        "    ),",
        "+ ",
        "",
        "+ ",
        "    # Application title",
        "+ ",
        "    titlePanel(\"Old Faithful Geyser Data\"),",
        "+ ",
        "",
        "+ ",
        "    # Sidebar with a slider input for number of bins",
        "+ ",
        "    sidebarLayout(",
        "+ ",
        "        sidebarPanel(",
        "+ ",
        "            sliderInput(\"bins\",",
        "+ ",
        "                        \"Number of bins:\",",
        "+ ",
        "                        min = 1,",
        "+ ",
        "                        max = 50,",
        "+ ",
        "                        value = 30)",
        "+ ",
        "        ),",
        "+ ",
        "",
        "+ ",
        "        # Show a plot of the generated distribution",
        "+ ",
        "        mainPanel(",
        "+ ",
        "           plotOutput(\"distPlot\")",
        "+ ",
        "        )",
        "+ ",
        "    )",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "# Define server logic required to draw a histogram",
        "> ",
        "server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "    output$distPlot <- renderPlot({",
        "+ ",
        "        test = 'darkgray'",
        "+ ",
        "",
        "+ ",
        "        # generate bins based on input$bins from ui.R",
        "+ ",
        "        x    <- faithful[, 2]",
        "+ ",
        "        bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "",
        "+ ",
        "        # draw the histogram with the specified number of bins",
        "+ ",
        "        hist(x, breaks = bins, col = test, border = 'white')",
        "+ ",
        "    })",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:7400\n",
        "\nRestarting R session...\n\n",
        "> ",
        "a",
        "function (...) \ntags$a(...)\n<bytecode: 0x55d1ae219cc8>\n<environment: namespace:htmltools>\n",
        "> ",
        "# Generates 500 rows of data using the input settings from config.json",
        "> ",
        "",
        "> ",
        "library(shiny)",
        "> ",
        "library(shiny.grid)",
        "> ",
        "",
        "> ",
        "# Define UI for application that draws a histogram",
        "> ",
        "ui <- gridPage(",
        "+ ",
        "    title = \"its a boy\",",
        "+ ",
        "    dependency = bootstrapLib(),",
        "+ ",
        "    # dependency = shiny.semantic:::get_dependencies(),",
        "+ ",
        "",
        "+ ",
        "    # \"grid_template_areas\" = \"\"",
        "+ ",
        "    \"grid_template_rows\" = \"1fr 2fr\",",
        "+ ",
        "    \"grid_template_columns\" = \"1fr 1fr\",",
        "+ ",
        "",
        "+ ",
        "    gridPanel(",
        "+ ",
        "      titlePanel(\"Old Faithful Geyser Data\")",
        "+ ",
        "    ),",
        "+ ",
        "",
        "+ ",
        "    # Application title",
        "+ ",
        "    titlePanel(\"Old Faithful Geyser Data\"),",
        "+ ",
        "",
        "+ ",
        "    # Sidebar with a slider input for number of bins",
        "+ ",
        "    sidebarLayout(",
        "+ ",
        "        sidebarPanel(",
        "+ ",
        "            sliderInput(\"bins\",",
        "+ ",
        "                        \"Number of bins:\",",
        "+ ",
        "                        min = 1,",
        "+ ",
        "                        max = 50,",
        "+ ",
        "                        value = 30)",
        "+ ",
        "        ),",
        "+ ",
        "",
        "+ ",
        "        # Show a plot of the generated distribution",
        "+ ",
        "        mainPanel(",
        "+ ",
        "           plotOutput(\"distPlot\")",
        "+ ",
        "        )",
        "+ ",
        "    )",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "# Define server logic required to draw a histogram",
        "> ",
        "server <- function(input, output) {",
        "+ ",
        "",
        "+ ",
        "    output$distPlot <- renderPlot({",
        "+ ",
        "        test = 'darkgray'",
        "+ ",
        "",
        "+ ",
        "        # generate bins based on input$bins from ui.R",
        "+ ",
        "        x    <- faithful[, 2]",
        "+ ",
        "        bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "",
        "+ ",
        "        # draw the histogram with the specified number of bins",
        "+ ",
        "        hist(x, breaks = bins, col = test, border = 'white')",
        "+ ",
        "    })",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the application",
        "> ",
        "shinyApp(ui = ui, server = server)",
        "\nListening on http://127.0.0.1:6713\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('examples/example_1.R')",
        "\nListening on http://127.0.0.1:7736\n",
        "\nRestarting R session...\n\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:5367\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:6824\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:6824\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:7901\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:5353\n",
        "\n",
        "\n",
        "> ",
        "gridPage('')",
        "<div id=\"grid-page-wrapper\" style=\"display: grid; grid-template-rows:;grid-template-columns:;grid-template-areas:;\"></div>\n",
        "> ",
        "gridPage()",
        "<div id=\"grid-page-wrapper\" style=\"display: grid; grid-template-rows:;grid-template-columns:;grid-template-areas:;\"></div>\n\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:6931\n",
        "\n",
        "\n",
        "> ",
        "gridPage()",
        "<div id=\"grid-page-wrapper\" style=\"display: grid; grid-template-rows:;grid-template-columns:;grid-template-areas:;\"></div>\n",
        "> ",
        "gridPage",
        "function (\n  ...,\n  title = NULL,\n  dependency = NULL,\n  grid_template_areas = NULL,\n  grid_template_rows = NULL,\n  grid_template_columns = NULL\n) {\n\n  tags$div(\n    id = \"grid-page-wrapper\",\n    style = paste0(\n      \"display: grid; \",\n      \"grid-template-rows:\", grid_template_rows, \";\",\n      \"grid-template-columns:\", grid_template_columns, \";\",\n      \"grid-template-areas:\", grid_template_areas, \";\"\n    ),\n\n    if (!is.null(title)) tags$head(tags$title(title)),\n    list(...),\n    dependency\n  )\n}\n<bytecode: 0x558e6b062220>\n",
        "<environment: namespace:shiny.grid>\n\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "library(shiny.grid)",
        "> ",
        "gridPage",
        "function (\n  ...,\n  title = NULL,\n  dependency = NULL,\n  grid_template_areas = NULL,\n  grid_template_rows = NULL,\n  grid_template_columns = NULL\n) {\n\n  tags$div(\n    id = \"grid-page-wrapper\",\n    style = paste0(\n      \"display: grid; \",\n      \"grid-template-rows:\", grid_template_rows, \";\",\n      \"grid-template-columns:\", grid_template_columns, \";\",\n      \"grid-template-areas:\", grid_template_areas, \";\"\n    ),\n\n    if (!is.null(title)) tags$head(tags$title(title)),\n    list(...),\n    dependency\n  )\n}\n<bytecode: 0x555b0e368448>\n",
        "<environment: namespace:shiny.grid>\n\nRestarting R session...\n\n",
        "> ",
        "gridPage",
        "function (\n  ...,\n  title = NULL,\n  dependency = NULL,\n  grid_template_areas = NULL,\n  grid_template_rows = NULL,\n  grid_template_columns = NULL,\n  fill_page = TRUE\n) {\n\n  if(fill_page) {\n    style<- paste0(style, \"height: 100vh; width: 100vw; \")\n  }\n\n  tagList(\n    if(fill_page) {\n      tags$head(\n        tags$style(\"html, body {height: 100vh; width: 100vw; }\")\n      )\n    },\n    tags$div(\n      id = \"grid-page-wrapper\",\n      style = paste0(\n        \"display: grid; \",\n        \"grid-template-rows:\", grid_template_rows, \";\",\n",
        "        \"grid-template-columns:\", grid_template_columns, \";\",\n        \"grid-template-areas:\", grid_template_areas, \";\"\n      ),\n\n      if (!is.null(title)) tags$head(tags$title(title)),\n      list(...),\n      dependency\n    )\n  )\n}\n<bytecode: 0x55640ed69b70>\n<environment: namespace:shiny.grid>\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "Error in paste0(style, \"height: 100vh; width: 100vw; \") : \n  object 'style' not found\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:7793\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "Error in parse(file, keep.source = FALSE, srcfile = src, encoding = enc) : \n  /home/pedro/Code/shiny.grid/examples/example_1.R:19:7: unexpected symbol\n18:       grid_position = c(1, 2, 1, 1)\n19:       titlePanel\n          ^\n",
        "Possible missing comma at:\n19:      titlePanel(\"Old Faithful Geyser Data\")\n         ^\n",
        "Error in sourceUTF8(fullpath, envir = new.env(parent = globalenv())) : \n  Error sourcing /home/pedro/Code/shiny.grid/examples/example_1.R\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:5836\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:5836\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:5836\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3636\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3636\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3636\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3636\n",
        "\n",
        "\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3636\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "Error in parse(file, keep.source = FALSE, srcfile = src, encoding = enc) : \n  /home/pedro/Code/shiny.grid/examples/example_1.R:22:5: unexpected symbol\n21: \n22:     gridPanel\n        ^\n",
        "Possible missing comma at:\n22:    gridPanel(\n       ^\n",
        "Error in sourceUTF8(fullpath, envir = new.env(parent = globalenv())) : \n  Error sourcing /home/pedro/Code/shiny.grid/examples/example_1.R\n",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3309\n",
        "Warning in if (!is.na(attribValue)) { :",
        "\n ",
        " the condition has length > 1 and only the first element will be used\n",
        "Warning in charToRaw(enc2utf8(text)) :",
        "\n ",
        " argument should be a character vector of length 1\nall but the first element will be ignored\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "Called from: gridPage(title = \"its a boy\", grid_template_rows = \"100px 1fr 1fr\", \n    grid_template_columns = \"1fr 1fr 1fr\", grid_template_areas = c(\"header header header\", \n        \"sidebar main main\", \"sidebar main main\"), gridPanel(position = \"header\", \n        titlePanel(\"Old Faithful Geyser Data\")), gridPanel(position = \"sidebar\", \n        sliderInput(\"bins\", \"Number of bins:\", min = 1, max = 50, \n            value = 30)), gridPanel(position = \"main\", plotOutput(\"distPlot\")))\n",
        "Browse[1]> ",
        "grid_template_areas",
        "[1] \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "Browse[1]> ",
        "paste0(grid_template_areas)",
        "[1] \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "Browse[1]> ",
        "paste0(\"h: \", grid_template_areas)",
        "[1] \"h: header header header\" \"h: sidebar main main\"    \"h: sidebar main main\"   \n",
        "Browse[1]> ",
        "lapply(grid_template_areas, function(line){return(line)})",
        "[[1]]\n[1] \"header header header\"\n\n[[2]]\n[1] \"sidebar main main\"\n\n[[3]]\n[1] \"sidebar main main\"\n\n",
        "Browse[1]> ",
        "paste0(\"s \", lapply(grid_template_areas, function(line){return(line)}))",
        "[1] \"s header header header\" \"s sidebar main main\"    \"s sidebar main main\"   \n",
        "Browse[1]> ",
        "do.call(c(\"f\", lapply(grid_template_areas, function(line){return(line)})))",
        "Error in do.call(c(\"f\", lapply(grid_template_areas, function(line) { : \n  argument \"args\" is missing, with no default\n",
        "Browse[1]> ",
        "do.call(c(\"f\", grid_template_areas))",
        "Error in do.call(c(\"f\", grid_template_areas)) : \n  argument \"args\" is missing, with no default\n",
        "Browse[1]> ",
        "do.call(paste0, c(\"f\", grid_template_areas))",
        "Error in do.call(paste0, c(\"f\", grid_template_areas)) : \n  second argument must be a list\n",
        "Browse[1]> ",
        "c(grid_template_areas)",
        "[1] \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "Browse[1]> ",
        "c(f\", grid_template_areas)",
        "+ ",
        ")",
        "+ ",
        "\"9\"",
        "Error: unexpected string constant in:\n\")\n\"\"\n",
        "Browse[1]> ",
        "c(\"f\", grid_template_areas)",
        "[1] \"f\"                    \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "Browse[1]> ",
        "do.call(paste0, c(\"f\", grid_template_areas))",
        "Error in do.call(paste0, c(\"f\", grid_template_areas)) : \n  second argument must be a list\n",
        "Browse[1]> ",
        "do.call(paste0, list(\"f\", grid_template_areas))",
        "[1] \"fheader header header\" \"fsidebar main main\"    \"fsidebar main main\"   \n",
        "Browse[1]> ",
        "do.call(paste0, grid_template_areas)",
        "Error in do.call(paste0, grid_template_areas) : \n  second argument must be a list\n",
        "Browse[1]> ",
        "do.call(paste0, list(grid_template_areas))",
        "[1] \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "Browse[1]> ",
        "paste0(\"h: \", grid_template_areas, collapse = TRUE)",
        "Error in paste0(\"h: \", grid_template_areas, collapse = TRUE) : \n  invalid 'collapse' argument\n",
        "Browse[1]> ",
        "as.character(grid_template_areas)",
        "[1] \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "Browse[1]> ",
        "paste0(\"h: \", grid_template_areas, collapse = \"\")",
        "[1] \"h: header header headerh: sidebar main mainh: sidebar main main\"\n",
        "Browse[1]> ",
        "paste0(grid_template_areas, collapse = \" \")",
        "[1] \"header header header sidebar main main sidebar main main\"\n",
        "Browse[1]> ",
        "paste0(grid_template_areas, collapse = \"'\")",
        "[1] \"header header header'sidebar main main'sidebar main main\"\n",
        "Browse[1]> ",
        "paste0(grid_template_areas, collapse = \"' \")",
        "[1] \"header header header' sidebar main main' sidebar main main\"\n",
        "Browse[1]> ",
        "paste0(grid_template_areas, collapse = \"' '\")",
        "[1] \"header header header' 'sidebar main main' 'sidebar main main\"\n",
        "Browse[1]> ",
        "paste0(grid_template_areas, collapse = \"/\"\")",
        "+ ",
        "\"\"",
        "Error: unexpected string constant in:\n\"paste0(grid_template_areas, collapse = \"/\"\")\n\"\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "Called from: gridPage(title = \"its a boy\", grid_template_rows = \"100px 1fr 1fr\", \n    grid_template_columns = \"1fr 1fr 1fr\", grid_template_areas = c(\"header header header\", \n        \"sidebar main main\", \"sidebar main main\"), gridPanel(position = \"header\", \n        titlePanel(\"Old Faithful Geyser Data\")), gridPanel(position = \"sidebar\", \n        sliderInput(\"bins\", \"Number of bins:\", min = 1, max = 50, \n            value = 30)), gridPanel(position = \"main\", plotOutput(\"distPlot\")))\n",
        "Browse[1]> ",
        "c",
        "\nListening on http://127.0.0.1:4702\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "Called from: gridPage(title = \"its a boy\", grid_template_rows = \"100px 1fr 1fr\", \n    grid_template_columns = \"1fr 1fr 1fr\", grid_template_areas = c(\"header header header\", \n        \"sidebar main main\", \"sidebar main main\"), gridPanel(grid_template_rows = \"100px 1fr 1fr\", \n        grid_template_columns = \"1fr 1fr 1fr\", grid_template_areas = c(\"header header header\", \n            \"sidebar main main\", \"sidebar main main\"), position = \"header\", \n        titlePanel(\"Old Faithful Geyser Data\")), gridCell(position = \"sidebar\", \n",
        "        sliderInput(\"bins\", \"Number of bins:\", min = 1, max = 50, \n            value = 30)), gridCell(position = \"main\", plotOutput(\"distPlot\")))\n",
        "Browse[1]> ",
        "c",
        "Called from: gridPage(..., title = NULL, dependency = NULL)\n",
        "Browse[1]> ",
        "c",
        "\nListening on http://127.0.0.1:5492\n",
        "Warning:",
        " Error in pngfun: invalid 'width' argument\n",
        "  127: [37mpngfun[39m\n",
        "",
        "  126: [37mstartPNG[39m\n",
        "",
        "  125: [37mdrawPlot[39m\n",
        "",
        "  111: [37m<reactive:plotObj>[39m\n",
        "",
        "   95: [37mdrawReactive[39m\n",
        "",
        "   82: [37morigRenderFunc[39m\n",
        "",
        "   81: [37moutput$distPlot[39m\n",
        "",
        "    1: [37mrunApp[39m\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3038\n",
        "\n",
        "\n",
        "> ",
        "a <- c(",
        "+ ",
        "    \"header header header\",",
        "+ ",
        "    \"sidebar main main\",",
        "+ ",
        "    \"sidebar main main\"",
        "+ ",
        ")",
        "> ",
        "a",
        "[1] \"header header header\" \"sidebar main main\"    \"sidebar main main\"   \n",
        "> ",
        "a <- c(",
        "+ ",
        "    \"header                 header header\",",
        "+ ",
        "    \"sidebar main main\",",
        "+ ",
        "    \"sidebar main main\"",
        "+ ",
        ")",
        "> ",
        "a",
        "[1] \"header                 header header\" \"sidebar main main\"                    \"sidebar main main\"                   \n",
        "> ",
        "paste(a, collapse = \" \")",
        "[1] \"header                 header header sidebar main main sidebar main main\"\n",
        "> ",
        "unlist(strsplit(a, split=\", \"))",
        "[1] \"header                 header header\" \"sidebar main main\"                    \"sidebar main main\"                   \n",
        "> ",
        "unlist(strsplit(a, split=\" \"))",
        " [1] \"header\"  \"\"        \"\"        \"\"        \"\"        \"\"        \"\"        \"\"        \"\"        \"\"        \"\"        \"\"       \n[13] \"\"        \"\"        \"\"        \"\"        \"\"        \"header\"  \"header\"  \"sidebar\" \"main\"    \"main\"    \"sidebar\" \"main\"   \n[25] \"main\"   \n",
        "> ",
        "sample(unlist(strsplit(a, split=\" \")))",
        " [1] \"main\"    \"\"        \"header\"  \"\"        \"\"        \"\"        \"main\"    \"main\"    \"\"        \"header\"  \"\"        \"\"       \n[13] \"\"        \"\"        \"\"        \"sidebar\" \"sidebar\" \"main\"    \"header\"  \"\"        \"\"        \"\"        \"\"        \"\"       \n[25] \"\"       \n",
        "> ",
        "unique(unlist(strsplit(a, split=\" \")))",
        "[1] \"header\"  \"\"        \"sidebar\" \"main\"   \n",
        "> ",
        "stri_remove_empty(unique(unlist(strsplit(a, split=\" \"))))",
        "Error in stri_remove_empty(unique(unlist(strsplit(a, split = \" \")))) : \n  could not find function \"stri_remove_empty\"\n",
        "> ",
        "stringi::stri_remove_empty(unique(unlist(strsplit(a, split=\" \"))))",
        "[1] \"header\"  \"sidebar\" \"main\"   \n",
        "> ",
        "lapply(stringi::stri_remove_empty(unique(unlist(strsplit(a, split=\" \")))), function(single){",
        "+ ",
        "    return(paste0(\".\", single, \" { grid-area: \", single, \";} \"))",
        "+ ",
        "})",
        "[[1]]\n[1] \".header { grid-area: header;} \"\n\n[[2]]\n[1] \".sidebar { grid-area: sidebar;} \"\n\n[[3]]\n[1] \".main { grid-area: main;} \"\n\n\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:7633\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:3903\n",
        "\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(shiny.grid)",
        "> ",
        "runApp('example_1.R')",
        "\nListening on http://127.0.0.1:6989\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        2
    ]
}