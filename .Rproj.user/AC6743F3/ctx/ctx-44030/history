# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny.grid)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny.grid)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny.grid)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny.grid)
is.character()
is.character(2)
is.character("2323")
is.character(c(1,2))
is.character(NULL)
library(shiny.grid)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# "grid_template_areas" = ""
"grid_template_rows" = "1fr 2fr"
"grid_template_columns" = "1fr 1fr"
gridPanel(
titlePanel("Old Faithful Geyser Data")
),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# "grid_template_areas" = ""
"grid_template_rows" = "1fr 2fr",
"grid_template_columns" = "1fr 1fr",
gridPanel(
titlePanel("Old Faithful Geyser Data")
),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
a
# Generates 500 rows of data using the input settings from config.json
library(shiny)
library(shiny.grid)
# Define UI for application that draws a histogram
ui <- gridPage(
title = "its a boy",
dependency = bootstrapLib(),
# dependency = shiny.semantic:::get_dependencies(),
# "grid_template_areas" = ""
"grid_template_rows" = "1fr 2fr",
"grid_template_columns" = "1fr 1fr",
gridPanel(
titlePanel("Old Faithful Geyser Data")
),
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
test = 'darkgray'
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = test, border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny.grid)
runApp('examples/example_1.R')
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
gridPage('')
gridPage()
library(shiny.grid)
runApp('example_1.R')
gridPage()
gridPage
library(shiny.grid)
library(shiny.grid)
gridPage
gridPage
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
runApp('example_1.R')
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
runApp('example_1.R')
runApp('example_1.R')
runApp('example_1.R')
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
grid_template_areas
paste0(grid_template_areas)
paste0("h: ", grid_template_areas)
lapply(grid_template_areas, function(line){return(line)})
paste0("s ", lapply(grid_template_areas, function(line){return(line)}))
do.call(c("f", lapply(grid_template_areas, function(line){return(line)})))
do.call(c("f", grid_template_areas))
do.call(paste0, c("f", grid_template_areas))
c(grid_template_areas)
c(f", grid_template_areas)
)
"9"
c("f", grid_template_areas)
do.call(paste0, c("f", grid_template_areas))
do.call(paste0, list("f", grid_template_areas))
do.call(paste0, grid_template_areas)
do.call(paste0, list(grid_template_areas))
paste0("h: ", grid_template_areas, collapse = TRUE)
as.character(grid_template_areas)
paste0("h: ", grid_template_areas, collapse = "")
paste0(grid_template_areas, collapse = " ")
paste0(grid_template_areas, collapse = "'")
paste0(grid_template_areas, collapse = "' ")
paste0(grid_template_areas, collapse = "' '")
paste0(grid_template_areas, collapse = "/"")
""
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
a <- c(
"header header header",
"sidebar main main",
"sidebar main main"
)
a
a <- c(
"header                 header header",
"sidebar main main",
"sidebar main main"
)
a
paste(a, collapse = " ")
unlist(strsplit(a, split=", "))
unlist(strsplit(a, split=" "))
sample(unlist(strsplit(a, split=" ")))
unique(unlist(strsplit(a, split=" ")))
stri_remove_empty(unique(unlist(strsplit(a, split=" "))))
stringi::stri_remove_empty(unique(unlist(strsplit(a, split=" "))))
lapply(stringi::stri_remove_empty(unique(unlist(strsplit(a, split=" ")))), function(single){
return(paste0(".", single, " { grid-area: ", single, ";} "))
})
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
library(shiny.grid)
runApp('example_1.R')
